Containers are becoming the standard unit of deployment. 
Each container image has:
1. Code
2. Binaries
3. Configuration
4. Libraries
5. Frameworks
6. Runtime
Makes the job of DevOps very easy

Docker solved the problem of packaging, deploying and running containerized applications.
Docker has the 3 components:
1. Container engine
2. Registry
3. Tools
Docker is great for few containers running on few machines.
However, production applications deal with dozens of containers running on hundreds of machines.

Unit of deployments change from machine to a container.
The infrastructures are become immutable.

We think of applications with emphasis on treating datacenters as a cluster.

The new datacenter infrastructure use tools like docker swarm, kubernetes and mesosphere CD/OS.
These manage the lifecycle of containerized applications running in production.
These also automate the distribution of applications and ensure higher levels of utilization
and efficiency.

Clusters are made on top of VMs to run applications. 
Microservices are a bunch of homogenous applications running on multiple containers in 
synchronization.

Cluster management tools help manage the orchestration frameworks of the architecture.

Kubernetes is a unified API for deploying web applications, batch jobs and databases.
It decouples applications from machines through containers.
It is an abstraction on a framework called Borg, and is a declarative approach to deploying 
applications.

It automates application configuration through service discovery.
It maintains and tracks the global view of the cluster and is an API for deploying workflows.

It defines rolling updates, canary deploys and blue-green deployments in a stateless 
infrastructure.

It allows you to build your own PaaS.
It is a distributed architecture, where it has a master, responsible for maintaining global view
and making decisions on a set of slave nodes.

The master can be interacted with through the API, UI or the CLI (kubectl) where the architecture
spec is given as a YAML file.

The slave nodes update the workflow outputs in the registry.

Minikube is the simplest way to get Kubernetes clusters up and running and 
configure the kube env.

It can also be done through a Kubernetes Multi-Node cluster that emulates production envs 
and is good for testing advanced scenarios.

The Google container engine (GKE) is also used to configure the env.

minikube status - gives the status of minikube

Nodes are hosts that run kubernetes applications
Containers are units of packaging
Pods are units of deployment
Replication controllers ensure availibility and scalability
Labels are key value pairs for identification
Services are collection of pods exposed as an endpoint

kubectl get nodes - how many nodes are running
kubectl get cs - component status
kubectl get pods - check pods
kubectl config use-context "env" - switches contexts to another setup

kubectl run <appname> --image=<image-name> --port=<port> - run a deployment which starts a pod of
image-name

kubectl expose deployment <app> --target-port=<port> --type=<port-type> - creates a service to
expose the deployment

kubectl get svc - shows created Services

minikube ip - IP of minikube UI
curl on this ip will give the service API endpoint's output

minikube dashboard - opens the web UI

It doesn't matter what environment you're pointing to, the commands remain the same.