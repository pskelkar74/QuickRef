A service is an abstraction of a logical set of pods defined by a policy
The pods have very ephemeral IPs and once a pod is desstroyed and brought back up, they need to be referenced
These can be front-end or backend pods, and usually, might be referenced through DNS techniques, but not in the case
of ephemeral IPs

A service acts as an intermediary for pods to talk to each other.
Selectors are used to access the pods that match a specific label
Each service exposes one of more ports and targetPorts

The targetPort is mapped to the port exposed by matching pods
The K8s service supports TCP and UDP

Services can encapsulate pods based on labels, and all traffic can be flown into the respective pods
Every node on k8s exposes only 1 nodePort to the outside world, but the target port binds to a unique port

DNS servers watch the K8s API for new services and creates a set of DNS record for each service
Docker Link compatible environment varialbles are made in all pods by k8s. Containers can use these varialbles
to talk to the service endpoint

All pods belonging to the same namespace get the same environment variables. So while migrating pods from docker 
compose environments, no code needs to be changed.

Pods in other namespaces can access the service by adding the namespace to the DNS path

There are three service types
1. ClusterIP - endpoint reachable from within the cluster and is confined only to the cluster ( for backend services)
2. NodePort - endpoint reachable from the outside to interact with services in the clusters whose services are exposed
3. LoadBalancer - endpoint reachable from an external load balancer mapped to a <NodeIP>:NodePort address

kubectl apply -f <svc-modified> - Applies changes done to services