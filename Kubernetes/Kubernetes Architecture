Kubernetes has 2 different layers: master and nodes.
The master is responsible for provisioning and managing the API requests.

Kubernetes understands declarative artifacts (YAML) and depending on these rules,
Kubernetes distributes the specification among pods.

The Kubernetes master has 3 components:
1. API server - exposes API endpoints as k8s is API-centric
                kubectl is a golang binary application to deal with k8s' API server.
                Even the dashboard consumes this API server
2. Scheduler - responsible for physically scheduling containers or pods accross nodes.
3. Controller - responsible for overall coordination and health of cluster. 
4. etcd - distributed lightweight key-value database 
          central database to store current cluster state
          single source of truth for all components of the infrastructure

The nodes do the heavy work and contains:
1. kube-proxy - responsible for maintaining network configurations, to maintain distributed
                networks and exposes services, core component
2. Docker - engine responsible for running the container
3. kubelet - talks to the API and master, and reports the health, metrics, etc to etcd and master
            (Supervisord packages docker and kubelets together)
4. fluentd - responsible for managing logs and talks to the central logging mechanism
5. pods - every node can different pods of different configurations.
6. Add-ons - DNS, UI, etc 

Kubernetes has pods which are fundamental deploying units of k8s.
Pods are groups of one or more containers that are always co-located, co-Scheduled and
run in a shared context.
Containers in the same pod have the same hostname.
Each pod is isloated by:
1. Process ID - PID
2. Network namespace
3. Interprocess communication (IPC) namespace
4. Unix Time Sharing (UTC) namespace

It serves as an alternative to a VM with multiple processes

Labels and selectors are key/value pairs associated with k8s objects
They are used to organize and select subsets of objects
They are attatched to objects at creation time but modified at any time
Metadata is assigned to every pod and it is selectively used to pick pods.

Services are an abstraction to define a logical set of pods bound by a policy by to access them
They are exposed through internal and external endpoints
They can also point to non-Kubernetes endpoints through a virtual-IP-bridge
they support with TCP or UDP, and interface with kube-proxy to manipulate iptables
The service can be exposed internal or external to the cluster

